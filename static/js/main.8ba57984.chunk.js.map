{"version":3,"sources":["moodClient.js","mood.js","pages/Vote.js","pages/Report.js","App.js","serviceWorker.js","index.js"],"names":["apiUrl","process","getMood","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","response","content","wrap","_context","prev","next","fetch","concat","sent","json","abrupt","t0","console","log","stop","apply","this","arguments","postMood","_ref2","_callee2","mood","updatedMood","_context2","method","body","JSON","stringify","_x","getHistory","_ref3","_callee3","_context3","src_mood","question","options","id","label","button","color","Options","onSelect","react_default","createElement","MOOD","map","o","key","className","onClick","Vote","handleSelect","moodId","userMood","assign","toConsumableArray","defineProperty","href","Vote_Options","react_router_dom","to","Component","Today","es","maintainAspectRatio","legend","rotation","data","labels","datasets","backgroundColor","Trend","history","m","date","type","fill","borderColor","scales","yAxes","height","App","state","todayMood","refresh","_this","setState","setInterval","Report_Today","Report_Trend","basename","react_router","exact","path","component","Report","from","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8ba57984.chunk.js","sourcesContent":["const apiUrl = process.env.REACT_APP_API_URL\r\n\r\nexport const getMood = async () => {\r\n  try {\r\n    const response = await fetch(`${apiUrl}/mood`)\r\n    const content = await response.json()\r\n    return content\r\n  } catch (e) {\r\n    console.log(e)\r\n    return null\r\n  }\r\n}\r\n\r\nexport const postMood = async mood => {\r\n  try {\r\n    console.log('Posting mood', mood)\r\n    const response = await fetch(`${apiUrl}/mood`, {\r\n      method: 'POST',\r\n      body: JSON.stringify(mood),\r\n    })\r\n    const updatedMood = await response.json()\r\n    console.log('Updated mood', updatedMood)\r\n    return updatedMood\r\n  } catch (e) {\r\n    console.log(e)\r\n    return null\r\n  }\r\n}\r\n\r\nexport const getHistory = async () => {\r\n  try {\r\n    const response = await fetch(`${apiUrl}/history`)\r\n    const content = await response.json()\r\n    return content\r\n  } catch (e) {\r\n    console.log(e)\r\n    return null\r\n  }\r\n}\r\n","export default {\r\n  question: 'How do you feel today?',\r\n  options: [\r\n    { id: 'red', label: 'bad', button: 'btn-danger', color: '#dc3545' },\r\n    { id: 'yellow', label: 'normal', button: 'btn-warning', color: '#ffc107' },\r\n    { id: 'green', label: 'great', button: 'btn-success', color: '#28a745' },\r\n  ],\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { postMood } from '../moodClient'\r\nimport MOOD from '../mood'\r\n\r\nconst Options = ({ onSelect }) => (\r\n  <div>\r\n    {MOOD.options.map(o => (\r\n      <button\r\n        key={o.id}\r\n        className={`btn ${o.button} btn-xl m-2`}\r\n        onClick={() => onSelect(o.id)}\r\n      >\r\n        {o.label}\r\n      </button>\r\n    ))}\r\n  </div>\r\n)\r\n\r\nclass Vote extends Component {\r\n  handleSelect = async moodId => {\r\n    const userMood = Object.assign(\r\n      {},\r\n      ...MOOD.options.map(o => ({ [o.id]: 0, [moodId]: 1 }))\r\n    )\r\n    await postMood(userMood)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <header>\r\n          <a href=\"https://github.com/slavagu/moodometer\">moodometer</a>\r\n        </header>\r\n        <div className=\"app-content\">\r\n          <p>{MOOD.question}</p>\r\n          <Options onSelect={this.handleSelect} />\r\n        </div>\r\n        <footer>\r\n          <Link to=\"/report\">Report</Link>\r\n        </footer>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Vote\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Bar, Doughnut } from 'react-chartjs-2'\r\nimport { getMood, getHistory } from '../moodClient'\r\nimport MOOD from '../mood'\r\n\r\nconst Today = ({ mood }) => (\r\n  <Doughnut\r\n    options={{ maintainAspectRatio: false, legend: false, rotation: 1.57 }}\r\n    data={{\r\n      labels: MOOD.options.map(o => o.label),\r\n      datasets: [\r\n        {\r\n          data: mood && MOOD.options.map(o => mood[o.id]),\r\n          backgroundColor: MOOD.options.map(o => o.color),\r\n        },\r\n      ],\r\n    }}\r\n  />\r\n)\r\n\r\nconst Trend = ({ history }) => {\r\n  if (!history) return null\r\n\r\n  const data = {\r\n    labels: history.map(m => m.date),\r\n    datasets: MOOD.options.map(o => ({\r\n      label: o.label,\r\n      type: 'line',\r\n      data: history.map(m => m[o.id]),\r\n      fill: false,\r\n      borderColor: o.color,\r\n      backgroundColor: o.color,\r\n    })),\r\n  }\r\n\r\n  const options = {\r\n    maintainAspectRatio: false,\r\n    legend: false,\r\n    scales: {\r\n      yAxes: [\r\n        {\r\n          // stacked: true,\r\n        },\r\n      ],\r\n    },\r\n  }\r\n\r\n  return <Bar data={data} options={options} height={200} />\r\n}\r\n\r\nclass App extends Component {\r\n  state = {\r\n    history: null,\r\n    todayMood: null,\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.refresh()\r\n    setInterval(this.refresh, 60000)\r\n  }\r\n\r\n  refresh = async () => {\r\n    const todayMood = await getMood()\r\n    const history = await getHistory()\r\n    this.setState({ todayMood, history })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <header>\r\n          <a href=\"https://github.com/slavagu/moodometer\">moodometer</a>\r\n        </header>\r\n        <div className=\"app-content\">\r\n          <div>\r\n            <Today mood={this.state.todayMood} />\r\n          </div>\r\n          <p className=\"font-weight-light text-muted\">today</p>\r\n          <div className=\"h-50\">\r\n            <Trend history={this.state.history} />\r\n          </div>\r\n        </div>\r\n        <footer>\r\n          <Link to=\"/vote\">Home</Link>\r\n        </footer>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom'\r\nimport Vote from './pages/Vote'\r\nimport Report from './pages/Report'\r\n\r\nconst App = () => (\r\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n    <Switch>\r\n      <Route exact path=\"/\" component={Vote} />\r\n      <Route path=\"/report\" component={Report} />\r\n      <Redirect from=\"*\" to=\"/\" />\r\n    </Switch>\r\n  </BrowserRouter>\r\n)\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}