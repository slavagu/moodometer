{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["labels","buttons","colors","Options","_ref","onSelect","react_default","a","createElement","map","btn","i","key","className","concat","onClick","Report","_ref2","answers","es","height","options","maintainAspectRatio","legend","rotation","data","datasets","backgroundColor","App","state","handleSelect","choice","Object","toConsumableArray","_this","setState","App_Options","this","App_Report","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8MAIMA,EAAS,CAAC,QAAS,OAAQ,SAC3BC,EAAU,CAAC,aAAc,cAAe,eACxCC,EAAS,CAAC,UAAW,UAAW,WAEhCC,EAAU,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACdC,EAAAC,EAAAC,cAAA,WACGP,EAAQQ,IAAI,SAACC,EAAKC,GAAN,OACXL,EAAAC,EAAAC,cAAA,UACEI,IAAKZ,EAAOW,GACZE,UAAS,OAAAC,OAASJ,EAAT,eACTK,QAAS,kBAAMV,EAASM,KAEvBX,EAAOW,QAMVK,EAAS,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,QAAH,OACbZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,CACEC,OAAQ,IACRC,QAAS,CAAEC,qBAAqB,EAAOC,QAAQ,EAAOC,SAAU,MAChEC,KAAM,CAAEzB,SAAQ0B,SAAU,CAAC,CAAED,KAAMP,EAASS,gBAAiBzB,QA4BlD0B,6MAvBbC,MAAQ,CACNX,QAAS,CAAC,EAAG,EAAG,MAElBY,aAAe,SAAAC,GACb,IAAMb,EAAOc,OAAAC,EAAA,EAAAD,CAAOE,EAAKL,MAAMX,SAC/BA,EAAQa,KACRG,EAAKC,SAAS,CAAEjB,qFAGhB,OACEZ,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACbP,EAAAC,EAAAC,cAAA,UAAQK,UAAU,cAChBP,EAAAC,EAAAC,cAAA,mCACAF,EAAAC,EAAAC,cAAC4B,EAAD,CAAS/B,SAAUgC,KAAKP,eACxBxB,EAAAC,EAAAC,cAAA,OAAKK,UAAU,qBACbP,EAAAC,EAAAC,cAAC8B,EAAD,CAAQpB,QAASmB,KAAKR,MAAMX,oBAhBtBqB,aClBEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.08e61000.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './App.css'\nimport { Doughnut } from 'react-chartjs-2'\n\nconst labels = ['so-so', 'good', 'great']\nconst buttons = ['btn-danger', 'btn-warning', 'btn-success']\nconst colors = ['#EB3547', '#FFC03E', '#00A553']\n\nconst Options = ({ onSelect }) => (\n  <div>\n    {buttons.map((btn, i) => (\n      <button\n        key={labels[i]}\n        className={`btn ${btn} btn-lg m-2`}\n        onClick={() => onSelect(i)}\n      >\n        {labels[i]}\n      </button>\n    ))}\n  </div>\n)\n\nconst Report = ({ answers }) => (\n  <Doughnut\n    height={120}\n    options={{ maintainAspectRatio: false, legend: false, rotation: 1.57 }}\n    data={{ labels, datasets: [{ data: answers, backgroundColor: colors }] }}\n  />\n)\n\nclass App extends Component {\n  state = {\n    answers: [0, 0, 0],\n  }\n  handleSelect = choice => {\n    const answers = [...this.state.answers]\n    answers[choice]++\n    this.setState({ answers })\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>How do you feel today?</p>\n          <Options onSelect={this.handleSelect} />\n          <div className=\"fixed-bottom pb-2\">\n            <Report answers={this.state.answers} />\n          </div>\n        </header>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}