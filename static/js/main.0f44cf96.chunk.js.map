{"version":3,"sources":["moodClient.js","App.js","serviceWorker.js","index.js"],"names":["apiUrl","process","getMood","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","response","content","wrap","_context","prev","next","fetch","sent","json","abrupt","t0","console","log","stop","apply","this","arguments","postMood","_ref2","_callee2","mood","updatedMood","_context2","method","body","JSON","stringify","_x","VOTE","question","options","id","label","button","color","getUserMood","voteId","assign","concat","toConsumableArray","map","o","defineProperty","VoteOptions","onSelect","react_default","createElement","key","className","onClick","VoteResults","_ref3","es","maintainAspectRatio","legend","rotation","data","labels","datasets","backgroundColor","App","state","teamMood","renderUserVote","_this","setState","handleSelect","userMood","href","App_VoteOptions","App_VoteResults","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0f44cf96.chunk.js","sourcesContent":["const apiUrl = process.env.REACT_APP_API_URL\r\n\r\nexport const getMood = async () => {\r\n  try {\r\n    const response = await fetch(apiUrl)\r\n    const content = await response.json()\r\n    return content\r\n  } catch (e) {\r\n    console.log(e)\r\n    return null\r\n  }\r\n}\r\n\r\nexport const postMood = async mood => {\r\n  try {\r\n    console.log('Posting mood', mood)\r\n    const response = await fetch(apiUrl, {\r\n      method: 'POST',\r\n      body: JSON.stringify(mood),\r\n    })\r\n    const updatedMood = await response.json()\r\n    console.log('Updated mood', updatedMood)\r\n    return updatedMood\r\n  } catch (e) {\r\n    console.log(e)\r\n    return null\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Doughnut } from 'react-chartjs-2'\r\nimport { getMood, postMood } from './moodClient'\r\n\r\nconst VOTE = {\r\n  question: 'How do you feel today?',\r\n  options: [\r\n    { id: 'red', label: 'so-so', button: 'btn-danger', color: '#dc3545' },\r\n    { id: 'yellow', label: 'good', button: 'btn-warning', color: '#ffc107' },\r\n    { id: 'green', label: 'great', button: 'btn-success', color: '#28a745' },\r\n  ],\r\n}\r\n\r\nconst getUserMood = voteId =>\r\n  Object.assign({}, ...VOTE.options.map(o => ({ [o.id]: 0, [voteId]: 1 })))\r\n\r\nconst VoteOptions = ({ onSelect }) => (\r\n  <div>\r\n    {VOTE.options.map(o => (\r\n      <button\r\n        key={o.id}\r\n        className={`btn ${o.button} btn-lg m-2`}\r\n        onClick={() => onSelect(o.id)}\r\n      >\r\n        {o.label}\r\n      </button>\r\n    ))}\r\n  </div>\r\n)\r\n\r\nconst VoteResults = ({ mood }) => (\r\n  <Doughnut\r\n    options={{ maintainAspectRatio: false, legend: false, rotation: 1.57 }}\r\n    data={{\r\n      labels: VOTE.options.map(o => o.label),\r\n      datasets: [\r\n        {\r\n          data: mood && VOTE.options.map(o => mood[o.id]),\r\n          backgroundColor: VOTE.options.map(o => o.color),\r\n        },\r\n      ],\r\n    }}\r\n  />\r\n)\r\n\r\nclass App extends Component {\r\n  state = {\r\n    teamMood: null,\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const teamMood = await getMood()\r\n    this.setState({ teamMood })\r\n  }\r\n\r\n  renderUserVote = id => {\r\n    const { teamMood } = this.state\r\n    teamMood[id]++\r\n    this.setState({ teamMood })\r\n  }\r\n\r\n  handleSelect = async id => {\r\n    this.renderUserVote(id) // optional optimisation for faster user feedback\r\n\r\n    const userMood = getUserMood(id)\r\n    const teamMood = await postMood(userMood)\r\n    this.setState({ teamMood })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <header>\r\n          <a href=\"https://github.com/slavagu/moodometer\">moodometer</a>\r\n        </header>\r\n        <div className=\"app-content\">\r\n          <p>{VOTE.question}</p>\r\n          <VoteOptions onSelect={this.handleSelect} />\r\n        </div>\r\n        <footer>\r\n          <VoteResults mood={this.state.teamMood} />\r\n        </footer>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}